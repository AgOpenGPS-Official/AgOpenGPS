name: MSBuild dev

on:
  # Trigger the workflow on push or pull request,
  # but only for the dev branch
  push:
    branches:
      - dev
  pull_request:
    branches:
      - dev
env:
  # Path to the solution file relative to the root of the project.https://github.com/jaapvandenhandel/AgOpenGPS/network/members
  SOLUTION_FILE_PATH: ./SourceCode/AgOpenGPS.sln

  # Configuration type to build.
  # You can convert this to a build matrix if you need coverage of multiple configuration types.
  # https://docs.github.com/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
  BUILD_CONFIGURATION: Release

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Install 7Zip PowerShell Module
      shell: powershell
      run: Install-Module 7Zip4PowerShell -Force -Verbose
         
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
  

    - uses: paulhatch/semantic-version@v4.0.1
      id: versioning
      with:
        # The prefix to use to identify tags
        tag_prefix: "v"
        # A string which, if present in a git commit, indicates that a change represents a
        # major (breaking) change, supports regular expressions wrapped with '/'
        major_pattern: "(MAJOR)"
        # Same as above except indicating a minor change, supports regular expressions wrapped with '/'
        minor_pattern: "(MINOR)"
        # A string to determine the format of the version output
        format: "${major}.${minor}.${patch}-prerelease${increment}"
        # Optional path to check for changes. If any changes are detected in the path the
        # 'changed' output will true. Enter multiple paths separated by spaces.
        change_path: "./SourceCode"
        # Named version, will be used as suffix for name version tag
        #namespace: project-b
        # Indicate whether short tags like 'v1' should be supported. If false only full
        # tags like 'v1.0.0' will be recognized.
        short_tags: false
        # If this is set to true, *every* commit will be treated as a new version.
        bump_each_commit: false
        
    - name: Update AssemblyVersion and AssemblyFileVersion
      run: ./SetVersion.ps1 "${{ steps.versioning.outputs.major }}.${{ steps.versioning.outputs.minor }}.${{ steps.versioning.outputs.patch }}.${{ steps.versioning.outputs.increment }}"
      shell: powershell
   
    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v1

    - name: Restore NuGet packages
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: nuget restore ${{env.SOLUTION_FILE_PATH}} -PackagesDirectory .\SourceCode\packages -source "https://api.nuget.org/v3/index.json"

    - name: Build
      working-directory: ${{env.GITHUB_WORKSPACE}}
      # Add additional options to the MSBuild command line here (like platform or verbosity level).
      # See https://docs.microsoft.com/visualstudio/msbuild/msbuild-command-line-reference
      run: msbuild /m /p:Configuration=${{env.BUILD_CONFIGURATION}} ${{env.SOLUTION_FILE_PATH}}
   
    - name: Directory Listing
      shell: cmd
      run: dir
      
    # Build arduino sketches
    # Install the CLI
    - name: Install Arduino CLI
      uses: arduino/setup-arduino-cli@v1.1.1
    
    # We then install the platform
    - name: Install platform
      run: |
        arduino-cli core update-index
        arduino-cli core install arduino:avr

    # Finally, we compile the sketches, use -e to export
    - name: Compile Sketch Autosteer_UDP_v5_0
      run: arduino-cli compile -e --fqbn arduino:avr:nano ./Support/Arduino/InoFiles/Autosteer_UDP_v5_0/Autosteer_UDP_v5_0.ino
    - name: Compile Sketch Autosteer_USB_v5_0
      run: arduino-cli compile -e --fqbn arduino:avr:nano ./Support/Arduino/InoFiles/Autosteer_USB_v5_0/Autosteer_USB_v5_0.ino
    - name: Compile Sketch IMU_UDP_v5_0
      run: arduino-cli compile -e --fqbn arduino:avr:nano ./Support/Arduino/InoFiles/IMU_UDP_v5_0/IMU_UDP_v5_0.ino
    - name: Compile Sketch IMU_USB_v5_0
      run: arduino-cli compile -e --fqbn arduino:avr:nano ./Support/Arduino/InoFiles/IMU_USB_v5_0/IMU_USB_v5_0.ino
    - name: Compile Sketch Machine_USB_46
      run: arduino-cli compile -e --fqbn arduino:avr:nano ./Support/Arduino/InoFiles/Machine_USB_46/Machine_USB_46.ino
    - name: Compile Sketch Machine_USB_v5_0
      run: arduino-cli compile -e --fqbn arduino:avr:nano ./Support/Arduino/InoFiles/Machine_USB_v5_0/Machine_USB_v5_0.ino
      
    - name: Copy Hex files
      shell: cmd
      run: | 
        copy /y .\Support\Arduino\InoFiles\Autosteer_UDP_v5_0\build\arduino.avr.nano\Autosteer_UDP_v5_0.ino.hex .\Support\Arduino\XLoader\HexFiles
        copy /y .\Support\Arduino\InoFiles\Autosteer_USB_v5_0\build\arduino.avr.nano\Autosteer_USB_v5_0.ino.hex .\Support\Arduino\XLoader\HexFiles
        copy /y .\Support\Arduino\InoFiles\IMU_UDP_v5_0\build\arduino.avr.nano\IMU_UDP_v5_0.ino.hex .\Support\Arduino\XLoader\HexFiles
        copy /y .\Support\Arduino\InoFiles\IMU_USB_v5_0\build\arduino.avr.nano\IMU_USB_v5_0.ino.hex .\Support\Arduino\XLoader\HexFiles
        copy /y .\Support\Arduino\InoFiles\Machine_USB_46\build\arduino.avr.nano\Machine_USB_46.ino.hex .\Support\Arduino\XLoader\HexFiles
        copy /y .\Support\Arduino\InoFiles\Machine_USB_v5_0\build\arduino.avr.nano\Machine_USB_v5_0.ino.hex .\Support\Arduino\XLoader\HexFiles
        
    - name: Delete build folders
      shell: cmd
      run: | 
        rmdir /s /q .\Support\Arduino\InoFiles\Autosteer_UDP_v5_0\build
        rmdir /s /q .\Support\Arduino\InoFiles\Autosteer_USB_v5_0\build
        rmdir /s /q .\Support\Arduino\InoFiles\IMU_UDP_v5_0\build
        rmdir /s /q .\Support\Arduino\InoFiles\IMU_USB_v5_0\build
        rmdir /s /q .\Support\Arduino\InoFiles\Machine_USB_46\build
        rmdir /s /q .\Support\Arduino\InoFiles\Machine_USB_v5_0\build
    
    - name: Build Artifact Support Files
      shell: powershell
      run: Compress-7Zip "Support" -ArchiveFileName "SupportFiles.zip" -Format Zip
      
    - name: Build Artifact AgOpenGPS
      shell: powershell
      run: Compress-7Zip "AgOpenGPS_v5" -ArchiveFileName "AgOpenGPS.zip" -Format Zip
      
    - name: Create Release
      id: create_release
      uses: actions/create-release@latest
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.versioning.outputs.version }}
        release_name: Release ${{ steps.versioning.outputs.version }}
        body: |
          Automated Release by GitHub Action CI
        draft: false
        prerelease: true
        
    - name: Upload Release Asset AgOpenGPS
      id: upload-release-asset-agopengps
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./AgOpenGPS.zip
        asset_name: AgOpenGPS.zip
        asset_content_type: application/zip
    
    - name: Upload Release Asset AgOpenGPS
      id: upload-release-asset-suppotfiles
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./AgOpenGPS.zip
        asset_name: AgOpenGPS.zip
        asset_content_type: application/zip
